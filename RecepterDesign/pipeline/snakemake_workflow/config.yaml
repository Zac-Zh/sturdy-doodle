# pipeline/snakemake_workflow/Snakefile
# Define the workflow for receptor design pipeline

import os
import yaml

# Load configuration
configfile: "config.yaml"

# Define wildcard constraints
wildcard_constraints:
    receptor = "[A-Za-z0-9_]+",
    mutation = "[A-Za-z0-9]+",
    iteration = "\d+"

# Define input files
RECEPTORS = config["receptors"]
MUTATIONS = config["mutations"]
ITERATIONS = range(1, config["max_iterations"] + 1)

# Define output directory
OUTPUT_DIR = config["D:\Code\RecepterDesign\output"]

# Final target rule
rule all:
    input:
        expand(os.path.join(OUTPUT_DIR, "final/{receptor}_optimized.pdb"), receptor=RECEPTORS),
        os.path.join(OUTPUT_DIR, "report/causal_graph_final.pdf")

# Predict structure with AlphaFold
rule predict_structure:
    input:
        sequence = "sequences/{receptor}.fasta"
    output:
        structure = os.path.join(OUTPUT_DIR, "structures/{receptor}_predicted.pdb")
    params:
        alphafold_path = config["alphafold_path"],
        output_dir = os.path.join(OUTPUT_DIR, "alphafold_output/{receptor}")
    threads: 8
    shell:
        """
        python {params.alphafold_path} \
        --fasta_paths {input.sequence} \
        --output_dir {params.output_dir} \
        --model_preset monomer \
        --max_template_date 2022-01-01 \
        --use_gpu_relax True
        
        cp {params.output_dir}/ranked_0.pdb {output.structure}
        """

# Generate mutations
rule generate_mutations:
    input:
        structure = os.path.join(OUTPUT_DIR, "structures/{receptor}_predicted.pdb"),
        sequence = "sequences/{receptor}.fasta"
    output:
        mutations = os.path.join(OUTPUT_DIR, "mutations/{receptor}_mutations.csv")
    params:
        script = "scripts/generate_mutations.py",
        max_mutations = config["max_mutations_per_receptor"]
    shell:
        """
        python {params.script} \
        --structure {input.structure} \
        --sequence {input.sequence} \
        --output {output.mutations} \
        --max_mutations {params.max_mutations}
        """

# Run AlphaFold-Mutagenesis Screening
rule afms_screening:
    input:
        structure = os.path.join(OUTPUT_DIR, "structures/{receptor}_predicted.pdb"),
        mutations = os.path.join(OUTPUT_DIR, "mutations/{receptor}_mutations.csv")
    output:
        results = os.path.join(OUTPUT_DIR, "afms/{receptor}_afms_results.csv")
    params:
        script = "scripts/run_afms.py",
        alphafold_path = config["alphafold_path"],
        gromacs_path = config["gromacs_path"]
    threads: 8
    shell:
        """
        python {params.script} \
        --structure {input.structure} \
        --mutations {input.mutations} \
        --output {output.results} \
        --alphafold_path {params.alphafold_path} \
        --gromacs_path {params.gromacs_path} \
        --threads {threads}
        """

# Build causal graph
rule build_causal_graph:
    input:
        afms_results = expand(os.path.join(OUTPUT_DIR, "afms/{receptor}_afms_results.csv"), receptor=RECEPTORS)
    output:
        causal_graph = os.path.join(OUTPUT_DIR, "causal_graph/initial_graph.json")
    params:
        script = "scripts/build_causal_graph.py",
        lambda_complexity = config["lambda_complexity"]
    shell:
        """
        python {params.script} \
        --afms_results {input.afms_results} \
        --output {output.causal_graph} \
        --lambda_complexity {params.lambda_complexity}
        """

# Generate receptor variants with GAN
rule gan_generation:
    input:
        causal_graph = os.path.join(OUTPUT_DIR, "causal_graph/initial_graph.json"),
        template_structure = os.path.join(OUTPUT_DIR, "structures/{receptor}_predicted.pdb")
    output:
        variants = os.path.join(OUTPUT_DIR, "gan/{receptor}/variants_iter{iteration}.csv"),
        structures = directory(os.path.join(OUTPUT_DIR, "gan/{receptor}/structures_iter{iteration}"))
    params:
        script = "scripts/run_gan_generation.py",
        checkpoint = lambda wildcards: f"{OUTPUT_DIR}/gan/{wildcards.receptor}/checkpoint_iter{int(wildcards.iteration)-1}.pt" if int(wildcards.iteration) > 1 else "none",
        num_variants = config["variants_per_iteration"]
    shell:
        """
        python {params.script} \
        --causal_graph {input.causal_graph} \
        --template {input.template_structure} \
        --output_variants {output.variants} \
        --output_structures {output.structures} \
        --checkpoint {params.checkpoint} \
        --num_variants {params.num_variants} \
        --iteration {wildcards.iteration}
        """

# Evaluate receptor variants
rule evaluate_variants:
    input:
        variants = os.path.join(OUTPUT_DIR, "gan/{receptor}/variants_iter{iteration}.csv"),
        structures = os.path.join(OUTPUT_DIR, "gan/{receptor}/structures_iter{iteration}")
    output:
        evaluation = os.path.join(OUTPUT_DIR, "evaluation/{receptor}/eval_iter{iteration}.csv")
    params:
        script = "scripts/evaluate_variants.py",
        gromacs_path = config["gromacs_path"]
    shell:
        """
        python {params.script} \
        --variants {input.variants} \
        --structures {input.structures} \
        --output {output.evaluation} \
        --gromacs_path {params.gromacs_path}
        """

# Update causal graph with new data
rule update_causal_graph:
    input:
        initial_graph = os.path.join(OUTPUT_DIR, "causal_graph/initial_graph.json"),
        evaluations = expand(os.path.join(OUTPUT_DIR, "evaluation/{receptor}/eval_iter{iteration}.csv"), 
                            receptor=RECEPTORS, 
                            iteration=ITERATIONS)
    output:
        updated_graph = os.path.join(OUTPUT_DIR, "causal_graph/final_graph.json")
    params:
        script = "scripts/update_causal_graph.py"
    shell:
        """
        python {params.script} \
        --initial_graph {input.initial_graph} \
        --evaluations {input.evaluations} \
        --output {output.updated_graph}
        """

# Select best variant
rule select_best_variant:
    input:
        evaluations = expand(os.path.join(OUTPUT_DIR, "evaluation/{receptor}/eval_iter{iteration}.csv"), 
                           iteration=ITERATIONS),
        structures = expand(os.path.join(OUTPUT_DIR, "gan/{receptor}/structures_iter{iteration}"), 
                          iteration=ITERATIONS)
    output:
        best_variant = os.path.join(OUTPUT_DIR, "final/{receptor}_optimized.pdb")
    params:
        script = "scripts/select_best_variant.py"
    shell:
        """
        python {params.script} \
        --evaluations {input.evaluations} \
        --structures_dirs {input.structures} \
        --output {output.best_variant}
        """

# Generate final report
rule generate_report:
    input:
        causal_graph = os.path.join(OUTPUT_DIR, "causal_graph/final_graph.json"),
        optimized_receptors = expand(os.path.join(OUTPUT_DIR, "final/{receptor}_optimized.pdb"), 
                                   receptor=RECEPTORS)
    output:
        report = os.path.join(OUTPUT_DIR, "report/causal_graph_final.pdf")
    params:
        script = "scripts/generate_report.py"
    shell:
        """
        python {params.script} \
        --causal_graph {input.causal_graph} \
        --optimized_receptors {input.optimized_receptors} \
        --output {output.report}